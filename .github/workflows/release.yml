name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.2.3)'
        required: true
        type: string
      prerelease:
        description: 'Create a prerelease'
        required: false
        default: false
        type: boolean

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Validate version format
      run: |
        if [[ ! "${{ github.event.inputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+(\-[a-zA-Z0-9\.\-]+)?$ ]]; then
          echo "❌ Invalid version format. Please use semantic versioning (e.g., 1.2.3 or 1.2.3-beta.1)"
          exit 1
        fi
        echo "✅ Version format is valid: ${{ github.event.inputs.version }}"
    
    - name: Check if version already exists
      run: |
        if git tag | grep -q "^v${{ github.event.inputs.version }}$"; then
          echo "❌ Version v${{ github.event.inputs.version }} already exists!"
          exit 1
        fi
        echo "✅ Version v${{ github.event.inputs.version }} is available"
    
    - name: Update package version
      run: |
        npm version ${{ github.event.inputs.version }} --no-git-tag-version
        echo "✅ Updated package.json to version ${{ github.event.inputs.version }}"
    
    - name: Run tests
      run: |
        npm run typecheck
        npm run build
        npm run test
        echo "✅ All tests passed"
    
    - name: Update CHANGELOG
      run: |
        VERSION="${{ github.event.inputs.version }}"
        DATE=$(date +%Y-%m-%d)
        
        # Backup existing changelog if it exists
        if [ -f CHANGELOG.md ]; then
          cp CHANGELOG.md CHANGELOG.md.backup
        fi
        
        # Create new changelog entry
        echo "# Changelog" > CHANGELOG.md.new
        echo "" >> CHANGELOG.md.new
        echo "## [$VERSION] - $DATE" >> CHANGELOG.md.new
        echo "" >> CHANGELOG.md.new
        echo "### Changed" >> CHANGELOG.md.new
        echo "- Release version $VERSION" >> CHANGELOG.md.new
        echo "" >> CHANGELOG.md.new
        
        # Append existing changelog if it exists
        if [ -f CHANGELOG.md.backup ]; then
          # Skip the first line (# Changelog) and append the rest
          tail -n +2 CHANGELOG.md.backup >> CHANGELOG.md.new
        fi
        
        mv CHANGELOG.md.new CHANGELOG.md
        rm -f CHANGELOG.md.backup
        echo "✅ Updated CHANGELOG.md"
    
    - name: Create GitHub Release
      id: create_release
      run: |
        VERSION="${{ github.event.inputs.version }}"
        PRERELEASE="${{ github.event.inputs.prerelease }}"
        
        # Create release notes
        cat > release_notes.md << EOF
        ## Changes in v$VERSION
        
        This release includes:
        - Release version $VERSION
        
        ### Installation
        \`\`\`bash
        npm install mollie-react@$VERSION
        \`\`\`
        
        ### Full Changelog
        See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for detailed changes.
        EOF
        
        # Create release using gh CLI
        if [ "$PRERELEASE" = "true" ]; then
          gh release create "v$VERSION" \
            --title "Release v$VERSION" \
            --notes-file release_notes.md \
            --prerelease
        else
          gh release create "v$VERSION" \
            --title "Release v$VERSION" \
            --notes-file release_notes.md \
            --draft=false
        fi
        
        # Get release URL
        RELEASE_URL=$(gh release view "v$VERSION" --json url --jq '.url')
        echo "release_url=$RELEASE_URL" >> $GITHUB_OUTPUT
        
        echo "✅ Release v$VERSION created successfully!"
        echo "🔗 Release URL: $RELEASE_URL"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Output release info
      run: |
        echo "✅ Release v${{ github.event.inputs.version }} created successfully!"
        echo "🔗 Release URL: ${{ steps.create_release.outputs.release_url }}"
        echo "📦 NPM package will be published automatically via the publish workflow"
